{"version":3,"sources":["../../api/test/test.js"],"names":[],"mappingssourcesContent":["// import chai from 'chai';\n// import chatHttp from 'chai-http';\n// import 'chai/register-should';\n// import app from '../index';\n\n// chai.use(chatHttp);\n// const { expect } = chai;\n\n// describe('Testing the book endpoints:', () => {\n//   it('It should create a book', (done) => {\n//     const book = {\n//       title: 'First Awesome book',\n//       price: '$9.99',\n//       description: 'This is the awesome book'\n//     };\n//     chai\n//       .request(app)\n//       .post('/api/v1/books')\n//       .set('Accept', 'application/json')\n//       .send(book)\n//       .end((err, res) => {\n//         expect(res.status).to.equal(201);\n//         expect(res.body.data).to.include({\n//           id: 1,\n//           title: book.title,\n//           price: book.price,\n//           description: book.description\n//         });\n//         done();\n//       });\n//   });\n\n//   it('It should not create a book with incomplete parameters', (done) => {\n//     const book = {\n//       price: '$9.99',\n//       description: 'This is the awesome book'\n//     };\n//     chai\n//       .request(app)\n//       .post('/api/v1/books')\n//       .set('Accept', 'application/json')\n//       .send(book)\n//       .end((err, res) => {\n//         expect(res.status).to.equal(400);\n//         done();\n//       });\n//   });\n\n//   it('It should get all books', (done) => {\n//     chai\n//       .request(app)\n//       .get('/api/v1/books')\n//       .set('Accept', 'application/json')\n//       .end((err, res) => {\n//         expect(res.status).to.equal(200);\n//         res.body.data[0].should.have.property('id');\n//         res.body.data[0].should.have.property('title');\n//         res.body.data[0].should.have.property('price');\n//         res.body.data[0].should.have.property('description');\n//         done();\n//       });\n//   });\n\n//   it('It should get a particular book', (done) => {\n//     const bookId = 1;\n//     chai\n//       .request(app)\n//       .get(`/api/v1/books/${bookId}`)\n//       .set('Accept', 'application/json')\n//       .end((err, res) => {\n//         expect(res.status).to.equal(200);\n//         res.body.data.should.have.property('id');\n//         res.body.data.should.have.property('title');\n//         res.body.data.should.have.property('price');\n//         res.body.data.should.have.property('description');\n//         done();\n//       });\n//   });\n\n//   it('It should not get a particular book with invalid id', (done) => {\n//     const bookId = 8888;\n//     chai\n//       .request(app)\n//       .get(`/api/v1/books/${bookId}`)\n//       .set('Accept', 'application/json')\n//       .end((err, res) => {\n//         expect(res.status).to.equal(404);\n//         res.body.should.have.property('message').eql(`Cannot find book with the id ${bookId}`);\n//         done();\n//       });\n//   });\n\n//   it('It should not get a particular book with non-numeric id', (done) => {\n//     const bookId = 'aaa';\n//     chai\n//       .request(app)\n//       .get(`/api/v1/books/${bookId}`)\n//       .set('Accept', 'application/json')\n//       .end((err, res) => {\n//         expect(res.status).to.equal(400);\n//         res.body.should.have.property('message').eql('Please input a valid numeric value');\n//         done();\n//       });\n//   });\n\n//   it('It should update a book', (done) => {\n//     const bookId = 1;\n//     const updatedBook = {\n//       id: bookId,\n//       title: 'Updated Awesome book',\n//       price: '$10.99',\n//       description: 'We have updated the price'\n//     };\n//     chai\n//       .request(app)\n//       .put(`/api/v1/books/${bookId}`)\n//       .set('Accept', 'application/json')\n//       .send(updatedBook)\n//       .end((err, res) => {\n//         expect(res.status).to.equal(200);\n//         expect(res.body.data.id).equal(updatedBook.id);\n//         expect(res.body.data.title).equal(updatedBook.title);\n//         expect(res.body.data.price).equal(updatedBook.price);\n//         expect(res.body.data.description).equal(updatedBook.description);\n//         done();\n//       });\n//   });\n\n//   it('It should not update a book with invalid id', (done) => {\n//     const bookId = '9999';\n//     const updatedBook = {\n//       id: bookId,\n//       title: 'Updated Awesome book again',\n//       price: '$11.99',\n//       description: 'We have updated the price'\n//     };\n//     chai\n//       .request(app)\n//       .put(`/api/v1/books/${bookId}`)\n//       .set('Accept', 'application/json')\n//       .send(updatedBook)\n//       .end((err, res) => {\n//         expect(res.status).to.equal(404);\n//         res.body.should.have.property('message').eql(`Cannot find book with the id: ${bookId}`);\n//         done();\n//       });\n//   });\n\n//   it('It should not update a book with non-numeric id value', (done) => {\n//     const bookId = 'ggg';\n//     const updatedBook = {\n//       id: bookId,\n//       title: 'Updated Awesome book again',\n//       price: '$11.99',\n//       description: 'We have updated the price'\n//     };\n//     chai\n//       .request(app)\n//       .put(`/api/v1/books/${bookId}`)\n//       .set('Accept', 'application/json')\n//       .send(updatedBook)\n//       .end((err, res) => {\n//         expect(res.status).to.equal(400);\n//         res.body.should.have.property('message').eql('Please input a valid numeric value');\n//         done();\n//       });\n//   });\n\n//   it('It should delete a book', (done) => {\n//     const bookId = 1;\n//     chai\n//       .request(app)\n//       .delete(`/api/v1/books/${bookId}`)\n//       .set('Accept', 'application/json')\n//       .end((err, res) => {\n//         expect(res.status).to.equal(200);\n//         expect(res.body.data).to.include({});\n//         done();\n//       });\n//   });\n\n//   it('It should not delete a book with invalid id', (done) => {\n//     const bookId = 777;\n//     chai\n//       .request(app)\n//       .delete(`/api/v1/books/${bookId}`)\n//       .set('Accept', 'application/json')\n//       .end((err, res) => {\n//         expect(res.status).to.equal(404);\n//         res.body.should.have.property('message').eql(`Book with the id ${bookId} cannot be found`);\n//         done();\n//       });\n//   });\n\n//   it('It should not delete a book with non-numeric id', (done) => {\n//     const bookId = 'bbb';\n//     chai\n//       .request(app)\n//       .delete(`/api/v1/books/${bookId}`)\n//       .set('Accept', 'application/json')\n//       .end((err, res) => {\n//         expect(res.status).to.equal(400);\n//         res.body.should.have.property('message').eql('Please provide a numeric value');\n//         done();\n//       });\n//   });\n// });\n"],"file":"test.js"}